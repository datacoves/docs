# Generated by Django 3.2.20 on 2024-07-01 21:18

import autoslug.fields
import core.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import projects.models.connection
import projects.models.environment


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('codegen', '0022_auto_20240701_2118'),
        ('users', '0021_auto_20240701_2118'),
        ('projects', '0104_merge_20240626_1552'),
    ]

    operations = [
        migrations.AlterField(
            model_name='blockedpodcreationrequest',
            name='request',
            field=models.JSONField(blank=True, default=dict, help_text='Request received by webhook, as JSON dictionary', null=True),
        ),
        migrations.AlterField(
            model_name='blockedpodcreationrequest',
            name='response',
            field=models.JSONField(blank=True, default=dict, help_text='Response sent, as JSON dictionary', null=True),
        ),
        migrations.AlterField(
            model_name='connectiontemplate',
            name='connection_details',
            field=core.fields.EncryptedJSONField(default=dict, editable=True, help_text='This maps the keys needed (which are defined in ConnectionType.required_fieldsets) to default values which may be overriden by ServiceCredential or UserCredential.'),
        ),
        migrations.AlterField(
            model_name='connectiontemplate',
            name='connection_user',
            field=models.CharField(choices=[('provided', 'User provided'), ('email_username', "Inferred from email's username"), ('template', 'Inferred from user info using a custom template')], default='provided', help_text='Can users configure their own credentials or are they restricted?  See the Model class documentation for full details.', max_length=20),
        ),
        migrations.AlterField(
            model_name='connectiontemplate',
            name='connection_user_template',
            field=models.ForeignKey(blank=True, help_text='Only used for custom templates connection user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='codegen.template'),
        ),
        migrations.AlterField(
            model_name='connectiontemplate',
            name='for_users',
            field=models.BooleanField(default=True, help_text='Can users set this credential up for themselves?'),
        ),
        migrations.AlterField(
            model_name='connectiontype',
            name='account',
            field=models.ForeignKey(blank=True, help_text='If null, this is a system level connection type.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='connection_types', to='users.account'),
        ),
        migrations.AlterField(
            model_name='connectiontype',
            name='required_fieldsets',
            field=models.JSONField(blank=True, default=list, help_text='list of lists: [["user", "password", "account"], ["user", "token", "account"]]', null=True),
        ),
        migrations.AlterField(
            model_name='connectiontype',
            name='slug',
            field=autoslug.fields.AutoSlugField(editable=False, help_text='The slug is used as the type, unlike many models where slug and type are different fields.', populate_from=projects.models.connection.connectiontype_slug, unique=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='airbyte_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Airbyte-specfic configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='airflow_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Airflow-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='code_server_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Code Server-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='datahub_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of DataHub-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='dbt_docs_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of DBT Doc-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='docker_config',
            field=core.fields.EncryptedJSONField(blank=True, default=projects.models.environment.default_docker_config, editable=True, help_text='An empty docker_config means core-api is not responsible for creating the secret, another system creates the secret named docker_config_secret_name.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='docker_registry',
            field=models.CharField(blank=True, help_text='If not provided, this defaults to dockerhub.', max_length=253),
        ),
        migrations.AlterField(
            model_name='environment',
            name='elastic_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Elastic-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='grafana_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Grafana-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='internal_services',
            field=models.JSONField(default=projects.models.environment.default_internal_services, help_text="Enable or disable certain internal services.  This is a dictionary that maps service names to dictionaries that have configuration for each service; each has a configuration key 'enabled' which may be true or false."),
        ),
        migrations.AlterField(
            model_name='environment',
            name='kafka_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Kafka-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='minio_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Minio-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='neo4j_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Neo4J-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='pomerium_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Pomerium-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='postgresql_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of PostgreSQL-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='profile',
            field=models.ForeignKey(default=projects.models.environment.default_profile, help_text='Profiles control files that are automatically generated for the environment and some credential items.  They are also the linkage to Profile Image Sets which can control what images and python libraries are available to an environment.', on_delete=django.db.models.deletion.CASCADE, related_name='environments', to='projects.profile'),
        ),
        migrations.AlterField(
            model_name='environment',
            name='quotas',
            field=models.JSONField(blank=True, default=dict, help_text='Quota configuration dictionary.  This overrides whatever is set on the plan level.  See the Plan model documentation for more details about how quotas work.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='release_profile',
            field=models.CharField(choices=[('dbt-snowflake', 'dbt-snowflake'), ('dbt-redshift', 'dbt-redshift'), ('dbt-bigquery', 'dbt-bigquery'), ('dbt-databricks', 'dbt-databricks')], default='dbt-snowflake', help_text='We have different docker images for different backends; the release profile selects which set of docker images are used.', max_length=50),
        ),
        migrations.AlterField(
            model_name='environment',
            name='services',
            field=models.JSONField(default=projects.models.environment.default_services, help_text='A map of services. The keys are the names of enabled services. Values are dictionaries, currently empty. May be used in the future to specify that a service is paused due to an expired trial, etc. For most configuration, though, think first of adding fields to Environment and Workspace spec.'),
        ),
        migrations.AlterField(
            model_name='environment',
            name='settings',
            field=models.JSONField(blank=True, default=dict, help_text='A dictionary of general Environment settings.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='superset_config',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Superset-specific configuration items.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='sync',
            field=models.BooleanField(default=False, help_text="Does the environment need to be sync'd?  This will set up the environment and start pods up as needed."),
        ),
        migrations.AlterField(
            model_name='environment',
            name='update_strategy',
            field=models.CharField(choices=[('latest', 'Update to latest'), ('freezed', 'Freeze release'), ('minor', 'Update to latest minor patch'), ('major', 'Update to latest major patch')], default='freezed', help_text='How will system updates be applied to this environment.', max_length=10),
        ),
        migrations.AlterField(
            model_name='environment',
            name='variables',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='Dictionary of environment variables to provide to the pods; these are key-value pairs.', null=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='workspace_generation',
            field=models.IntegerField(help_text="The last workspace's (kubernetes resource) generation we wrote.", null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='If created_by is null, it is a system profile', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_profiles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='profilefile',
            name='execute',
            field=models.BooleanField(default=False, help_text='Specifies if file should be executed, requires shebang set on file.  If this is set, override_existent will be forced to True.'),
        ),
        migrations.AlterField(
            model_name='profilefile',
            name='mount_path',
            field=models.CharField(help_text='Path for the file', max_length=250),
        ),
        migrations.AlterField(
            model_name='profileimageset',
            name='build_airflow',
            field=models.BooleanField(default=False, help_text='If True, the build_profile_image_set task will build this docker image using requirements specified in the profile image set.'),
        ),
        migrations.AlterField(
            model_name='profileimageset',
            name='build_ci_airflow',
            field=models.BooleanField(default=False, help_text='If True, the build_profile_image_set task will build this docker image using requirements specified in the profile image set.'),
        ),
        migrations.AlterField(
            model_name='profileimageset',
            name='build_ci_basic',
            field=models.BooleanField(default=False, help_text='If True, the build_profile_image_set task will build this docker image using requirements specified in the profile image set.'),
        ),
        migrations.AlterField(
            model_name='profileimageset',
            name='build_code_server',
            field=models.BooleanField(default=True, help_text='If True, the build_profile_image_set task will build this docker image using requirements specified in the profile image set.'),
        ),
        migrations.AlterField(
            model_name='profileimageset',
            name='build_dbt_core_interface',
            field=models.BooleanField(default=True, help_text='If True, the build_profile_image_set task will build this docker image using requirements specified in the profile image set.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='ci_home_url',
            field=models.URLField(blank=True, help_text='Base URL for CI, if CI is being used.', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='deploy_credentials',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text="Required for HTTP clone stategy.  This will be a JSON dictionary with keys 'git_username' and 'git_password'", null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='deploy_key',
            field=models.ForeignKey(blank=True, help_text='Required for SSH clone strategy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='projects.sshkey'),
        ),
        migrations.AlterField(
            model_name='project',
            name='release_branch',
            field=models.CharField(default='main', help_text='Which branch is used for releases in the GIT repository', max_length=130),
        ),
        migrations.AlterField(
            model_name='project',
            name='repository',
            field=models.ForeignKey(help_text='GIT Repository to use for this project', on_delete=django.db.models.deletion.CASCADE, to='projects.repository'),
        ),
        migrations.AlterField(
            model_name='project',
            name='validated_at',
            field=models.DateTimeField(blank=True, help_text='Projects must be validated for services to run.  This is usually set by the system.', null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='variables',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='Environment variables used across the entire project', null=True),
        ),
        migrations.AlterField(
            model_name='release',
            name='airbyte_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='airbyte_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='airflow_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='airflow_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='ci_images',
            field=models.JSONField(default=list, help_text='Dictionary mapping image names to tags for CI images'),
        ),
        migrations.AlterField(
            model_name='release',
            name='code_server_extensions',
            field=models.JSONField(default=dict, help_text='Dictionary of VS Code extension names to versions which will be installed on a code server by default, unless overridden by a profile image set.'),
        ),
        migrations.AlterField(
            model_name='release',
            name='code_server_libraries',
            field=models.JSONField(default=dict, help_text='Dictionary of python library names to versions which will be installed on code server by default, unless overridden by a profile image set.'),
        ),
        migrations.AlterField(
            model_name='release',
            name='commit',
            field=models.CharField(help_text='GIT Commit Hash', max_length=100),
        ),
        migrations.AlterField(
            model_name='release',
            name='core_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='datahub_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='datahub_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='deprecated',
            field=models.JSONField(default=dict, help_text="Dictionary mapping 'charts' and 'deployments' to list of deprecated images."),
        ),
        migrations.AlterField(
            model_name='release',
            name='elastic_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='elastic_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='images',
            field=models.JSONField(default=dict, help_text='A dictionary mapping docker image names to tags (versions).'),
        ),
        migrations.AlterField(
            model_name='release',
            name='kafka_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='kafka_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='minio_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='neo4j_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='neo4j_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='notes',
            field=models.TextField(blank=True, help_text='Release notes', null=True),
        ),
        migrations.AlterField(
            model_name='release',
            name='observability_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='postgresql_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='postgresql_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='release',
            name='profile_flags',
            field=models.JSONField(default=dict, help_text='Dictionary mapping environment profiles to dictionaries of flags.'),
        ),
        migrations.AlterField(
            model_name='release',
            name='promtail_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='superset_chart',
            field=models.JSONField(default=dict, help_text='Helm Chart details for this service'),
        ),
        migrations.AlterField(
            model_name='release',
            name='superset_images',
            field=models.JSONField(default=list, help_text='A list of docker image names and tags required by `images`'),
        ),
        migrations.AlterField(
            model_name='repository',
            name='git_url',
            field=models.CharField(help_text='This may be a URL, or a ssh path such as: git@github.com:GROUP/REPO.git ... it will be forced to lower case on save.', max_length=250, unique=True),
        ),
        migrations.AlterField(
            model_name='repository',
            name='url',
            field=models.URLField(blank=True, help_text='This only supports a URL and is optional.', max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='servicecredential',
            name='connection_overrides',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='These override settings in the ConnectionTemplate; the keys that should be set between a ServiceCredential and a ConnectionTemplate are defined in ConnectionType.  This relationship is fully described in the ConnectionTemplate documentation.', null=True),
        ),
        migrations.AlterField(
            model_name='servicecredential',
            name='ssl_key',
            field=models.ForeignKey(blank=True, help_text='SSL key to use, if necessary for the connection type.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_credentials', to='projects.sslkey'),
        ),
        migrations.AlterField(
            model_name='servicecredential',
            name='validated_at',
            field=models.DateTimeField(blank=True, help_text='Credentials must be validated before we use them.  This should normally be set by the system.', null=True),
        ),
        migrations.AlterField(
            model_name='usercredential',
            name='connection_overrides',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='These override settings in the ConnectionTemplate; the keys that should be set between a UserCredential and a ConnectionTemplate are defined in ConnectionType.  This relationship is fully described in the ConnectionTemplate documentation.', null=True),
        ),
        migrations.AlterField(
            model_name='usercredential',
            name='ssl_key',
            field=models.ForeignKey(blank=True, help_text='The SSL key to use, if needed for this credential.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_credentials', to='projects.sslkey'),
        ),
        migrations.AlterField(
            model_name='usercredential',
            name='used_on',
            field=models.JSONField(default=projects.models.connection.default_user_credential_usages, help_text='JSON list of strings, which are the services that use this credential.'),
        ),
        migrations.AlterField(
            model_name='usercredential',
            name='validated_at',
            field=models.DateTimeField(blank=True, help_text='Only validated credentials will be used.  This is usually set by the system once we have verified the credential works.', null=True),
        ),
        migrations.AlterField(
            model_name='userenvironment',
            name='code_server_share_code',
            field=models.CharField(blank=True, help_text="This is automatically generated to be a random value on save() if code_server_access isn't ACCESS_PRIVATE", max_length=10, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='userenvironment',
            name='variables',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='Dictionary of key-value pairs for environment variables', null=True),
        ),
    ]
