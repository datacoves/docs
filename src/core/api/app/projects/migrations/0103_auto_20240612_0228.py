# Generated by Django 3.2.20 on 2024-06-12 02:28

from django.conf import settings
from django.db import migrations


def default_services():
    return {
        settings.SERVICE_AIRBYTE: {"enabled": False, "valid": True},
        settings.SERVICE_AIRFLOW: {"enabled": False, "valid": True},
        settings.SERVICE_CODE_SERVER: {
            "enabled": False,
            "valid": True,
        },
        settings.SERVICE_DBT_DOCS: {"enabled": False, "valid": True},
        settings.SERVICE_SUPERSET: {"enabled": False, "valid": True},
        settings.SERVICE_DATAHUB: {"enabled": False, "valid": True},
    }


def default_internal_services():
    return {
        settings.INTERNAL_SERVICE_MINIO: {"enabled": False},
        settings.INTERNAL_SERVICE_ELASTIC: {"enabled": False},
        settings.INTERNAL_SERVICE_NEO4J: {"enabled": False},
        settings.INTERNAL_SERVICE_POSTGRESQL: {"enabled": False},
        settings.INTERNAL_SERVICE_KAFKA: {"enabled": False},
    }



def make_permission_name(
    resource,
    action,
    scope=None,
    account_slug=None,
    project_slug=None,
    environment_slug=None,
):
    if scope is None:
        if account_slug is None and project_slug is None and environment_slug is None:
            return f"{resource}|{action}"
        scope = []
        if account_slug:
            scope.append(account_slug)
        if project_slug:
            scope.append(project_slug)
        if environment_slug:
            scope.append(environment_slug)
        scope = ":".join(scope)
    return f"{scope}|{resource}|{action}"

def create_permissions(apps, account_slug, project_slug, environment_slug=None):
    Account = apps.get_model("users", "Account")
    Permission = apps.get_model("auth", "Permission")
    ContentType = apps.get_model("contenttypes", "ContentType")
    content_type = ContentType.objects.get_for_model(Account)
    for resource in settings.WORKBENCH_RESOURCES:
        for action in (settings.ACTION_READ, settings.ACTION_WRITE):
            name = make_permission_name(
                resource,
                action,
                account_slug=account_slug,
                project_slug=project_slug,
                environment_slug=environment_slug,
            )

            Permission.objects.get_or_create(
                name=name,
                content_type=content_type,
                defaults={"codename": name[:100]},
            )


def reassign_environment_permissions(apps, environment):
    ExtendedGroup = apps.get_model("users", "ExtendedGroup")
    Permission = apps.get_model("auth", "Permission")

    ext_group = ExtendedGroup.objects.filter(environment=environment, role="environment_viewer").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{environment.slug}|{settings.SERVICE_DATAHUB_DATA}|{settings.ACTION_READ}"
        ):
            ext_group.group.permissions.add(permission)

    ext_group = ExtendedGroup.objects.filter(environment=environment, role="environment_developer").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{environment.slug}|{settings.SERVICE_DATAHUB_DATA}|{settings.ACTION_WRITE}"
        ):
            ext_group.group.permissions.add(permission)
    
    ext_group = ExtendedGroup.objects.filter(environment=environment, role="environment_sysadmin").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{environment.slug}|{settings.SERVICE_DATAHUB_ADMIN}|{settings.ACTION_WRITE}"
        ):
            ext_group.group.permissions.add(permission)


def reassign_project_permissions(apps, project):
    ExtendedGroup = apps.get_model("users", "ExtendedGroup")
    Permission = apps.get_model("auth", "Permission")

    ext_group = ExtendedGroup.objects.filter(project=project, role="project_viewer").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{project.slug}|{settings.SERVICE_DATAHUB_DATA}|{settings.ACTION_READ}"
        ):
            ext_group.group.permissions.add(permission)

    ext_group = ExtendedGroup.objects.filter(project=project, role="project_developer").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{project.slug}|{settings.SERVICE_DATAHUB_DATA}|{settings.ACTION_WRITE}"
        ):
            ext_group.group.permissions.add(permission)
    
    ext_group = ExtendedGroup.objects.filter(project=project, role="project_sysadmin").first()
    if ext_group:
        for permission in Permission.objects.filter(
            name__endswith=f"{project.slug}|{settings.SERVICE_DATAHUB_ADMIN}|{settings.ACTION_WRITE}"
        ):
            ext_group.group.permissions.add(permission)


def add_missing_default_services_to_environments(apps, schema_editor):
    Environment = apps.get_model("projects", "Environment")
    Project = apps.get_model("projects", "Project")
    
    for env in Environment.objects.all():
        services = default_services()
        services.update(env.services)
        internal_services = default_internal_services()
        internal_services.update(env.internal_services)
        env.services = services
        env.internal_services = internal_services
        env.save()
        create_permissions(apps, env.project.account.slug, env.project.slug, environment_slug=env.slug)
        reassign_environment_permissions(apps, env)

    for project in Project.objects.all():
        create_permissions(apps, project.account.slug, project.slug)
        reassign_project_permissions(apps, project)


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0102_auto_20240612_0211'),
    ]

    operations = [
        migrations.RunPython(add_missing_default_services_to_environments),
    ]
