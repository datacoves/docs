# Generated by Django 3.2.20 on 2024-07-01 21:18

import clusters.models.cluster
import core.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0105_auto_20240701_2118'),
        ('clusters', '0038_merge_20240617_1505'),
    ]

    operations = [
        migrations.AlterField(
            model_name='cluster',
            name='airbyte_config',
            field=models.JSONField(blank=True, default=dict, help_text="Default AirByte configuration.  This can be overridden per-environment.  It is a dictionary, typically with 'db' and 'logs' keys mapping to dictionaries with configuration for both.", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='airflow_config',
            field=models.JSONField(blank=True, default=dict, help_text='Default AirFlow configuration.  This can be overridden per-environment.  It is a dictionary, usually empty at this level.', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='api_server_ips',
            field=models.JSONField(blank=True, default=dict, help_text="A JSON dictionary with two keys in it; 'ips' and 'ports'.  'ips' is a list of internal DNS IPs as strings, and 'ports' is the corresponding list of port numbers as integers.", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='celery_heartbeat_at',
            field=models.DateTimeField(blank=True, help_text='Last time Celery reported in; not normally edited by users', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='cert_manager_issuer',
            field=models.CharField(blank=True, help_text='Sets the cert-manager.io/cluster-issuer annotation on the cluster ingress - https://cert-manager.io/docs/configuration/issuers/', max_length=253, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='code_server_config',
            field=models.JSONField(blank=True, default=dict, help_text="Default Code Server configuration.  This can be overridden per-environment.  It is a dictionary which typically has a 'resources' dictionary of Kubernetes resource allocations, an 'overprovisioning' dictionary which has settings for hot spares, and finally a key 'max_code_server_pods_per_node'.  This is not an exhaustive list.", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='datahub_config',
            field=models.JSONField(blank=True, default=dict, help_text='Default DataHub configuration.  This can be overriden per-environment.  It is a dictionary, usually empty at this level.', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='docker_config',
            field=core.fields.EncryptedJSONField(blank=True, default=clusters.models.cluster.default_docker_config, editable=True, help_text="If blank, then core-api is not responsible for creating the Docker config secret; another system creates the secret, which should be named docker_config_secret_name ... otherwise, this is a dictionary with an 'auths' key which, in turn, is a dictionary mapping registry host names to dictionaries of credential information: username, password, email, and auth", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='docker_config_secret_name',
            field=models.CharField(blank=True, default='docker-config-datacovesprivate', help_text='The Kubernetes secret to use with the Docker registry', max_length=253, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='docker_registry',
            field=models.CharField(blank=True, help_text='Registry to pull images from.  Can be blank for dockerhub.', max_length=253),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='domain',
            field=models.CharField(help_text='Base domain name for the cluster, without a leading .', max_length=253, unique=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='dont_use_uwsgi',
            field=models.BooleanField(default=False, help_text='Set true for development environments.'),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='efs_provisioner',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text="Dynamic EFS provisioning is not yet supported; this can be a dictionary with a 'global' field to fake autoprovisioning; the global field should contain the fake-provisioned EFS information.", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='external_dns_url',
            field=models.CharField(blank=True, help_text='Sets the external-dns.alpha.kubernetes.io/target annotation on the cluster ingress.  This requires provider support, and allows the creation of automatic DNS records.', max_length=253, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='external_ip',
            field=models.CharField(blank=True, help_text="The cluster's external IP address.  May be, and often is, blank.", max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='extra_images',
            field=models.JSONField(blank=True, default=list, help_text='Currently unused.  This comes from Releases instead.', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='features_enabled',
            field=models.JSONField(blank=True, default=clusters.models.cluster.default_features_enabled, help_text='Dictionary of feature flags.  There are too many to document here; see the default_features_enabled method in api/app/clusters/models/cluster.py', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='grafana_settings',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary of Grafana settings, such as OIDC secrets', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='internal_db_cluster_ip_range',
            field=models.CharField(blank=True, help_text='This is a CIDR-style IP address with netmask (i.e. 192.168.1.0/24).  It is for using a block of IP addresses for Egress, similar to internal_dns_ip; it probably does not make sense to use this and the other two internal address fields above.', max_length=18, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='internal_dns_ip',
            field=models.CharField(blank=True, help_text='Used to configure an Egress Rule to use a specific IP address.  This is used on private networks mostly in order toaccess the IP address of a DNS server.  You can set the Internal DNS URL instead if you want this to be dynamic.', max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='internal_dns_url',
            field=models.CharField(blank=True, help_text='This is a domain name which is resolved to get the internal_dns_ip address.  It does not make sense to set both this and internal_dns_ip.  See that field for more details.', max_length=253, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='internal_ip',
            field=models.CharField(blank=True, help_text="The cluster's internal IP address.  If this field is blank, external_ip should be blank as well, and both IP addresses will be fetched via Kubernetes' get_ingress_controller_ips call.  Leaving this blank, but filling in external_ip, will probably cause the operator to fail.", max_length=15, null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='kubernetes_version',
            field=models.CharField(help_text='Kubernetes version used by cluster', max_length=40),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='limits',
            field=models.JSONField(blank=True, default=clusters.models.cluster.default_limits, help_text='JSON Dictionary specifying the default cluster usage limits.  It can have the following keys which map to integer limits: max_cluster_active_accounts, max_cluster_active_environments, max_cluster_active_trial_accounts, max_cluster_active_users ... not all of these are implemented yet.', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='postgres_db_provisioner',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text='A dictionary with PostgreSQL server information.  It can have the following keys: host, pass, user, port (int), db ... If provided, we will automatically create PostgreSQL databases on the provided server (user/pass should belong to an admin user which can CREATE DATABASE).  Leave empty to use a database in the cluster.', null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='provider',
            field=models.CharField(choices=[('eks', 'EKS (Amazon)'), ('gke', 'GKE (Google)'), ('aks', 'AKS (Azure)'), ('kind', 'Kind (local)')], default='kind', help_text='Service Provider for Cluster', max_length=20),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='release',
            field=models.ForeignKey(default=clusters.models.cluster.default_release, help_text='Which release is being used for core services.', on_delete=django.db.models.deletion.PROTECT, related_name='clusters', to='projects.release'),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='release_channel',
            field=models.CharField(default='edge', help_text='Release channel to follow - Not used yet', max_length=20),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='s3_provisioner',
            field=core.fields.EncryptedJSONField(blank=True, default=dict, editable=True, help_text="Configuration to dynamically create S3 buckets.  This should be a dictionary with 'aws_access_key_id', 'aws_secret_access_key' and 'region'.  This enables us to automatically make S3 buckets as necessary.  If not set, features that need S3 buckets (such as airflow logs to S3) will need manual configuration.", null=True),
        ),
        migrations.AlterField(
            model_name='cluster',
            name='superset_config',
            field=models.JSONField(blank=True, default=dict, help_text='Default Superset configuration.  This can be overridden per-environment.  It is a dictionary, usually empty at this level.', null=True),
        ),
        migrations.AlterField(
            model_name='clusteralert',
            name='environment',
            field=models.ForeignKey(blank=True, help_text='If this is null, then it is a system alert.', null=True, on_delete=django.db.models.deletion.CASCADE, to='projects.environment'),
        ),
    ]
