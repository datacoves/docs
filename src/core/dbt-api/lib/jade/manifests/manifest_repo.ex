defmodule Jade.Manifests.ManifestRepo do
  @moduledoc """
  The Repository for Manifests.
  """
  use Jade, :repository

  alias Jade.Environments.Environment
  alias Jade.Environments.EnvironmentRepo
  alias Jade.JobRuns.JobRunRepo
  alias Jade.Manifests.Manifest
  alias Jade.Projects.Project

  def create(environment_slug, dag_id, run_id, content, tag \\ nil) do
    with {:ok, environment} <- EnvironmentRepo.get_by_slug(environment_slug),
         {:ok, job_run} <- JobRunRepo.get_by(environment, dag_id: dag_id, run_id: run_id),
         {:ok, manifest} <-
           do_create(%{environment: environment, job_run: job_run, tag: tag, content: content}) do
      {:ok, manifest}
    end
  end

  def create(environment_slug, content, tag \\ nil) do
    with {:ok, environment} <- EnvironmentRepo.get_by_slug(environment_slug),
         {:ok, manifest} <-
           do_create(%{environment: environment, job_run: nil, tag: tag, content: content}) do
      {:ok, manifest}
    end
  end

  @spec get(integer()) :: {:ok, Manifest.t()} | {:error, :not_found}
  def get(id) do
    Manifest
    |> Repo.get(id)
    |> Repo.normalize_one()
  end

  @spec get_by(list()) :: {:ok, Manifest.t()} | {:error, :not_found}
  def get_by(attrs) do
    Manifest
    |> Repo.get_by(attrs)
    |> Repo.normalize_one()
  end

  @spec get_latest_for_environment(Environment.t()) :: {:ok, Manifest.t()} | {:error, :not_found}
  def get_latest_for_environment(%Environment{} = environment) do
    Manifest
    |> where(environment_slug: ^environment.slug)
    |> order_by(desc: :inserted_at)
    |> limit(1)
    |> Repo.one()
    |> Repo.normalize_one()
  end

  @spec get_latest_for_project(Project.t()) :: {:ok, Manifest.t()} | {:error, :not_found}
  def get_latest_for_project(%Project{} = project) do
    Manifest
    |> where(project_id: ^project.id)
    |> order_by(desc: :inserted_at)
    |> limit(1)
    |> Repo.one()
    |> Repo.normalize_one()
  end

  @spec get_full_content(manifest :: Manifest.t()) :: map()
  def get_full_content(%Manifest{} = manifest) do
    Manifest
    |> where(id: ^manifest.id)
    |> select([:content])
    |> Repo.one()
    |> Map.get(:content)
  end

  @spec get_minimal_content(manifest :: struct()) :: map()
  def get_minimal_content(%Manifest{} = manifest) do
    base_query = from(m in Manifest, where: m.id == ^manifest.id)

    partial_query =
      from(m in base_query,
        select: %{
          # "id" => m.id,
          # "account_id" => m.account_id,
          # "project_id" => m.project_id,
          # "environment_slug" => m.environment_slug,
          # "dag_id" => m.dag_id,
          # "dag_run_id" => m.dag_run_run_id,
          "metadata" => m.content["metadata"],
          "nodes" => m.content["nodes"]
        }
      )

    Repo.one(partial_query)
  end

  @spec upload_file(Manifest.t(), binary()) :: :ok | {:error, any()}
  def upload_file(%Manifest{} = manifest, content) do
    filepath = Manifest.filepath(manifest)
    Jade.Storage.upload(filepath, content)
  end

  @spec download_file(Manifest.t()) :: {:ok, binary()} | {:error, any()}
  def download_file(%Manifest{} = manifest) do
    filepath = Manifest.filepath(manifest)
    Jade.Storage.download(filepath)
  end

  @doc """
  Deletes the contents of all manifests except the latest one per DAG.
  """
  def delete_old_manifest_contents() do
    latest_manifests =
      from(m in Manifest,
        group_by: [m.dag_id, m.id],
        order_by: [desc: m.inserted_at],
        distinct: m.dag_id,
        select: %{id: m.id, dag_id: m.dag_id}
      )
      |> Repo.all()

    now = DateTime.utc_now()

    Enum.reduce(latest_manifests, 0, fn %{id: id, dag_id: dag_id}, counter ->
      query =
        from(m in Manifest, where: m.dag_id == ^dag_id and m.id != ^id and not is_nil(m.content))

      {count, nil} = Repo.update_all(query, set: [content: nil, updated_at: now])
      counter + count
    end)
  end

  defp do_create(%{content: content} = attrs) do
    Repo.transact(fn ->
      with {:ok, manifest} <- create_manifest(attrs),
           :ok <- upload_file(manifest, content) do
        {:ok, manifest}
      end
    end)
  end

  def create_manifest(%{environment: environment, job_run: nil, tag: tag, content: content} = _attrs) do
    attrs = %{
      account_id: environment.account_id,
      project_id: environment.project_id,
      environment_slug: environment.slug,
      tag: tag,
      content: Jason.decode!(content)
    }

    %Manifest{}
    |> Manifest.changeset(attrs)
    # Return the struct to fetch the autogenerated slug.
    |> Repo.insert(returning: true)
  end

  def create_manifest(%{environment: environment, job_run: job_run, tag: tag, content: content} = _attrs) do
    attrs = %{
      account_id: environment.account_id,
      project_id: environment.project_id,
      environment_slug: environment.slug,
      dag_id: job_run.dag_id,
      dag_run_id: job_run.dag_run_id,
      dag_run_run_id: job_run.dag_run_run_id,
      job_run_id: job_run.id,
      tag: tag,
      content: Jason.decode!(content)
    }

    %Manifest{}
    |> Manifest.changeset(attrs)
    # Return the struct to fetch the autogenerated slug.
    |> Repo.insert(returning: true)
  end
end
